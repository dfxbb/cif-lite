#!/usr/bin/perl -w

use strict;

##########
#
# To Test:
#  $ perl ./cif_lite_client -q example.com 
#
##########


# fix lib paths, some may be relative
BEGIN {
    require File::Spec;
    my @libs = ("lib", "local/lib");
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            unless ($bin_path) {
                if ( File::Spec->file_name_is_absolute(__FILE__) ) {
                    $bin_path = ( File::Spec->splitpath(__FILE__) )[1];
                }
                else {
                    require FindBin;
                    no warnings "once";
                    $bin_path = $FindBin::Bin;
                }
            }
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }

}

use Getopt::Std;
use CIF::FeedParser;
use Config::Simple;
use Data::Dumper;
use CIF::Lite;

my %opts;
getopts('hS:c:f:i:q:s:',\%opts);
#my $config = $opts{'C'} || $ENV{'HOME'}.'/.cif';
#my $C = Config::Simple->new($config) || die($!.' '.$config);
my $conf_dir = '/opt/cif/etc';
my $server_config = $opts{'S'} || $conf_dir.'/server_lite.ini';
my $sconfig;
if(-e $server_config){
    $sconfig = Config::Simple->new($server_config);
}
die usage() if($opts{'h'});
my $query                  = $opts{'q'} || die($!.' Invalid query');
my $query_type             = $opts{'t'} || '';
my $severity_restriction   = $opts{'s'} || '';
my $confidence_restriction = $opts{'c'} || 0;
my $impact_restriction     = $opts{'i'} || ''; 
my $feed_restriction       = $opts{'f'} || '';

print "[DEBUG] Query $query\n";

sub usage {
    return <<EOF;
Usage: perl $0 -q example.com
    -h  --help:       this message
    -S  --sconfig:    server config location (database stuff, default: $server_config)
    -f  --feed:       restrict query to a specific source or datafeed
    -c  --confidence: restrict query to a specific minimum confidence
    -s  --severity:   restrict query to a specific minimum severity
    -i  --impact:     restrict query to be specific impact type
    -q  --query:      query string to search for, can use '%' for wildcards
    -t  --type:       type of query (e.g., ip, domain, url, email, md5, sha1) 
EOF
}

my $c_href;
if($sconfig && $sconfig->param(-block => 'database')){
    $sconfig = $sconfig->param(-block => 'database');
    $c_href->{'database'} = ['DBI:'.$sconfig->{'driver'}.':database='.$sconfig->{'database'}.';host='.$sconfig->{'host'},$sconfig->{'user'},$sconfig->{'password'},{AutoCommit => 1, PrintError => 0}];
}

my $db_config = $c_href->{'database'};
my $dbh = DBI->connect($db_config->[0], $db_config->[1], $db_config->[2], $db_config->[3]) or die "[ERROR] connection to DB failed $DBI::errstr\n";

my @query_types = ('ip', 'domain', 'url', 'email', 'md5', 'sha1');
if ($query_type ne '') {
	@query_types = ($query_type);
}

foreach my $type (@query_types) {
my $select_stmt = "SELECT * FROM cif_lite_$type WHERE ";
my @constraints;
my %impact_lookup;
my %source_lookup;

if ($query =~ /\%/) {
  $select_stmt .= "value LIKE ?";
} else {
  $select_stmt .= "value=?";
}
push(@constraints, $query);

my $source_select_sth = $dbh->prepare("SELECT * FROM cif_source_lookup") or die "[ERROR] preparing source lookup select $dbh->errstr\n";
my $source_select_retval = $source_select_sth->execute or die "[ERROR]  source lookup select $dbh->errstr\n";
if ($source_select_retval) {
  while (my $source_select_row = $source_select_sth->fetchrow_hashref()) {
    $source_lookup{$source_select_row->{'id'}} = $source_select_row->{'source'};
    if ($source_select_row->{'source'} eq $feed_restriction) {
      push(@constraints, $source_select_row->{'id'});
      $select_stmt .= " AND source_id=?";
    }
  }
  $source_select_sth->finish;
} else { print "[ERROR] failed source lookup select retval $dbh->errstr\n"; }

my $impact_select_sth = $dbh->prepare("SELECT * FROM cif_impact_lookup") or die "[ERROR] preparing impact lookup select $dbh->errstr\n";
my $impact_select_retval = $impact_select_sth->execute or die "[ERROR]  impact lookup select $dbh->errstr\n";
if ($impact_select_retval) {
  while (my $impact_select_row = $impact_select_sth->fetchrow_hashref()) {
    $impact_lookup{$impact_select_row->{'id'}} = $impact_select_row->{'impact'};
    if ($impact_select_row->{'impact'} eq $feed_restriction) {
      push(@constraints, $impact_select_row->{'id'});
      $select_stmt .= " AND impact_id=?";
    }
  }
  $impact_select_sth->finish;
} else { print "[ERROR] failed impact lookup select retval $dbh->errstr\n"; }

if (($confidence_restriction > 0) && ($confidence_restriction <=100 )) {
  push(@constraints, $confidence_restriction);
  $select_stmt .= " AND confidence>=?";
}
if ($severity_restriction) {
  push(@constraints, $severity_restriction);
  ## TODO: check if the $severity_restriction is equal to the full string enumeration and handle appropriately
  ## TODO: make enumeration numerical so you can check that something is >=Medium for example
  $select_stmt .= " AND severity_enum=?";
}

print "[DEBUG] Select statement: $select_stmt\n";
#print "[DEBUG] Constraints: " . Dumper(@constraints) . "\n";
my $select_sth = $dbh->prepare($select_stmt) or die "[ERROR] preparing query select $dbh->errstr\n";
my $select_retval = $select_sth->execute(@constraints) or die "[ERROR] executing query select " . $dbh->errstr . "\n";

while (my $select_row = $select_sth->fetchrow_hashref()) {
  foreach my $row_field (keys %$select_row) {
    if ($row_field eq 'source_id') {
      print $source_lookup{$select_row->{$row_field}} . " | ";
    }
    elsif ($row_field eq 'impact_id') {
      print $impact_lookup{$select_row->{$row_field}} . " | ";
    }
    else {
      print $select_row->{$row_field} . " | ";
    }
  }
  print "\n";
}
$select_sth->finish;
}

$dbh->disconnect();
exit(0);
